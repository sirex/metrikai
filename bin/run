#!/usr/bin/env python3

import collections
import os
import pathlib
import subprocess
import sys
import itertools

sys.path.append(str(pathlib.Path(__name__).resolve().parent))  # noqa


import click
import cv2 as cv
import numpy as np
import tqdm
import scipy.signal as signal

from metrikai import cleanup
from metrikai import show  # noqa
from metrikai import show_samples
from metrikai import scanxy  # noqa
from metrikai import SmartScan
from metrikai import im_to_X
from metrikai import wait_for_key  # noqa


@click.group()
def main():
    pass


@main.command('download-samples')
def download_samples():
    Sample = collections.namedtuple('Sample', ('url', 'num'))
    languages = {
        'la': [
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1521/1/20?exId=24294&seqNr={num}', 39),
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1375/1/16?exId=230351&seqNr={num}', 46),
        ],
        'ru': [
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1338/1/10?exId=320185&seqNr={num}', 203),
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1360/1/19?exId=97388&seqNr={num}', 155),
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1375/1/8?exId=230381&seqNr={num}', 196),
        ],
        'lt': [
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1375/1/27?exId=230345&seqNr={num}', 60),
            Sample('http://www.epaveldas.lt/recordImageSmall/ARCH/1375/1/24?exId=230346&seqNr={num}', 164),
        ]
    }

    total = sum(sample.num for samples in languages.values() for sample in samples)

    with tqdm.tqdm(total=total) as pbar:
        for language, samples in languages.items():
            for i, sample in enumerate(samples, 1):
                os.makedirs(f'samples/epaveldas/{language}/{i:03d}', exist_ok=True)
                for num in range(1, sample.num + 1):
                    subprocess.run(['wget', '-q', sample.url.format(num=num),
                                    '-O', f'samples/epaveldas/{language}/{i:03d}/{num:03d}.jpg'])
                    pbar.update(1)


@main.command()
def test():
    im = cleanup(cv.imread('samples/epaveldas/ru/001/004.jpg', cv.IMREAD_GRAYSCALE))
    ih, iw = im.shape

    x = 0
    while True:
        y = im[:, x:x + 50].mean(axis=1)
        y = signal.convolve(y, signal.hann(20))
        minimums = signal.argrelextrema(y, np.less, order=10)[0]

        print(np.diff(minimums).std())

        imx = cv.cvtColor(im[:, x:x + 50].copy(), cv.COLOR_GRAY2BGR)
        imx[minimums, :] = (64, 255, 64)
        cv.imshow('im', imx)

        key = cv.waitKey(0)
        if key == 27:
            break
        elif key & 0xFF == 83:  # right
            x += 50

    cv.destroyAllWindows()


@main.command()
def test1():
    im = cleanup(cv.imread('samples/epaveldas/ru/001/004.jpg', cv.IMREAD_GRAYSCALE))
    ih, iw = im.shape
    s = 25

    samples = np.empty((0, s * s), dtype=np.uint8)
    scanner = SmartScan(im, s, 5)

    import tqdm

    with tqdm.tqdm(total=8000) as pbar:
        # i = 0
        for x, y in itertools.islice(scanner.scanxy(), 8000):
            pbar.update(1)
            # pbar.update((y * iw + x) - i)
            # i = y * iw + x
            samples = np.append(samples, im_to_X(im[y:y + s, x:x + s]), axis=0)

    from sklearn.cluster import KMeans

    n_clusters = 50
    model = KMeans(n_clusters=n_clusters, random_state=0)
    clusters = model.fit_predict(samples)

    cluster = 0
    show_samples('im', samples[clusters == cluster], s=s)

    while True:
        key = cv.waitKey(0)

        next_cluster = None
        if key == 27:
            break
        elif key & 0xFF == 81:  # left
            next_cluster = cluster - 1 if cluster > 0 else n_clusters - 1
        elif key & 0xFF == 83:  # right
            next_cluster = cluster + 1 if cluster < n_clusters - 1 else 0

        if next_cluster is not None:
            cluster = next_cluster
            if samples[clusters == cluster].size > 0:
                show_samples('im', samples[clusters == cluster], s=s)

    cv.destroyAllWindows()


if __name__ == "__main__":
    main()
